import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import re
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="CRM –ê–Ω–∞–ª–∏–∑",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
st.markdown("""
<style>
:root {
  --background: #e8ebed;
  --foreground: #333333;
  --card: #ffffff;
  --card-foreground: #333333;
  --popover: #ffffff;
  --popover-foreground: #333333;
  --primary: #e05d38;
  --primary-foreground: #ffffff;
  --secondary: #f3f4f6;
  --secondary-foreground: #4b5563;
  --muted: #f9fafb;
  --muted-foreground: #6b7280;
  --accent: #d6e4f0;
  --accent-foreground: #1e3a8a;
  --destructive: #ef4444;
  --destructive-foreground: #ffffff;
  --border: #dcdfe2;
  --input: #f4f5f7;
  --ring: #e05d38;
  --chart-1: #86a7c8;
  --chart-2: #eea591;
  --chart-3: #5a7ca6;
  --chart-4: #466494;
  --chart-5: #334c82;
  --sidebar: #dddfe2;
  --sidebar-foreground: #333333;
  --sidebar-primary: #e05d38;
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: #d6e4f0;
  --sidebar-accent-foreground: #1e3a8a;
  --sidebar-border: #e5e7eb;
  --sidebar-ring: #e05d38;
  --font-sans: Inter, sans-serif;
  --font-serif: Source Serif 4, serif;
  --font-mono: JetBrains Mono, monospace;
  --radius: 0.75rem;
  --shadow-2xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10);
  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10);
  --shadow-md: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.10);
  --shadow-lg: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -1px hsl(0 0% 0% / 0.10);
  --shadow-xl: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.10);
  --shadow-2xl: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);
  --tracking-normal: 0em;
  --spacing: 0.25rem;
}

/* –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º Streamlit */
.main .block-container {
    background-color: var(--background) !important;
}

.stApp {
    background-color: var(--background) !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
.kpi-card {
    background: var(--card);
    color: var(--card-foreground);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    border: 1px solid var(--border);
    padding: 20px 24px 16px 24px;
    margin-bottom: 24px;
    font-family: var(--font-sans);
    min-width: 240px;
    transition: box-shadow .15s;
}
.kpi-card-label {
    font-size: 1.03rem;
    font-weight: 500;
    color: #6b7280;
    margin-bottom: 6px;
}
.kpi-card-value {
    font-size: 2.05rem;
    font-weight: bold;
    color: var(--primary);
    margin-bottom: 4px;
    margin-top: 2px;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Å –¥–µ–ª—å—Ç–æ–π */
.kpi-card-delta {
    background: var(--card);
    color: var(--card-foreground);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    border: 1px solid var(--border);
    padding: 20px 28px 18px 28px;
    font-family: var(--font-sans);
    min-width: 238px;
    margin-bottom: 18px;
    display: flex; 
    flex-direction: column;
    gap: 3px;
}
.kpi-label { 
    font-size: 1rem; 
    color: #787c8a; 
    font-weight: 500;
}
.kpi-value { 
    font-size: 2.0rem; 
    font-weight: 800; 
    color: var(--primary); 
    margin-top: 7px;
}
.kpi-delta-up {
    color: #16a34a;
    font-size: 1rem;
    margin-bottom: 3px;
    font-weight: 500;
}
.kpi-delta-blue {
    color: #3b82f6;
    font-size: 1rem;
    margin-bottom: 3px;
    font-weight: 500;
}
.kpi-delta-down {
    color: #ef4444;
    font-size: 1rem;
    margin-bottom: 3px;
    font-weight: 500;
}
.kpi-caption {
    font-size: 0.97rem;
    color: #888;
    margin-top: 4px;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
h1, h2, h3, h4, h5, h6 {
    color: var(--foreground) !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
p, div, span {
    color: var(--foreground) !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
.main .block-container {
    background-color: var(--background) !important;
}
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.subheader("üìä CRM –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–¥–µ–ª–æ–∫")

st.markdown("---")

def normalize_phone(phone):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    if pd.isna(phone):
        return None
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits_only = re.sub(r'\D', '', str(phone))
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '8' –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ '7'
    if len(digits_only) == 11 and digits_only.startswith('8'):
        digits_only = '7' + digits_only[1:]
    
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '7' –∏–ª–∏ '+7', –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(digits_only) == 11 and digits_only.startswith('7'):
        return digits_only
    
    return digits_only

def classify_event_type(event_type):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π"""
    if pd.isna(event_type):
        return '–ü—Ä–æ—á–µ–µ'
    
    event_type = str(event_type).strip()
    
    # –ó–∞–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if event_type == '–ü—Ä–æ—á–µ–µ':
        return '–°–∞–π—Ç'
    elif event_type in ['–ü–æ—á—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ']:
        return '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ'
    elif event_type in ['–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞', '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫']:
        return '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫'
    else:
        return event_type

def replace_project_values(project):
    """–ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ '–ü—Ä–æ–µ–∫—Ç'"""
    if pd.isna(project):
        return '–ü—É—Å—Ç–æ–π'
    
    project = str(project).strip()
    
    replacements = {
        '–ê–Ω–≥–∞—Ä—ã': '–ê–Ω–≥–∞—Ä—ã',
        '–ë–ª–æ–∫–∏': '–ë–ª–æ–∫–∏', 
        '–î–æ–º–∞': '–ê–Ω–≥–∞—Ä—ã',
        '–ö—Ä–æ–≤–ª—è': '–ö—Ä–æ–≤–ª—è –∏ –§–∞—Å–∞–¥—ã',
        '–°–Ω–∞–±–∂–µ–Ω–∏–µ': '–ö—Ä–æ–≤–ª—è –∏ –§–∞—Å–∞–¥—ã',
        '–§–∞—Å–∞–¥—ã': '–ö—Ä–æ–≤–ª—è –∏ –§–∞—Å–∞–¥—ã',
        '–ü—É—Å—Ç–æ (–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö)': '–ü—É—Å—Ç–æ–π'
    }
    
    return replacements.get(project, project)

def get_unique_interests(df):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    if len(df) == 0:
        return 0
    
    # –ï—Å–ª–∏ —É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
    if df['–¢–µ–ª–µ—Ñ–æ–Ω_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π'].isna().all():
        return len(df)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
    df_grouped = df.groupby('–¢–µ–ª–µ—Ñ–æ–Ω_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π')
    
    unique_interests = 0
    
    for phone, group in df_grouped:
        if pd.isna(phone):
            # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—É—Å—Ç–æ–π, —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
            unique_interests += len(group)
        elif len(group) == 1:
            unique_interests += 1
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            group_sorted = group.sort_values('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            last_date = None
            for _, row in group_sorted.iterrows():
                current_date = row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
                
                if last_date is None or (current_date - last_date).days > 2:
                    unique_interests += 1
                    last_date = current_date
    
    return unique_interests

@st.cache_data
def load_and_process_data(uploaded_interests_file=None, uploaded_deals_file=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if uploaded_interests_file is not None:
            interests_df = pd.read_excel(uploaded_interests_file)
        else:
            interests_df = pd.read_excel("—Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∑–∞ 2024-2025.xlsx")
            
        if uploaded_deals_file is not None:
            deals_df = pd.read_excel(uploaded_deals_file)
        else:
            deals_df = pd.read_excel("—Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∑–∞ 2024-2025.xlsx")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], format='%d.%m.%Y %H:%M:%S', errors='coerce')
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 01.01.2024
        start_date = pd.to_datetime('2024-01-01')
        interests_df = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] >= start_date]
        
        interests_df['–¢–µ–ª–µ—Ñ–æ–Ω_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π'] = interests_df['–¢–µ–ª–µ—Ñ–æ–Ω'].apply(normalize_phone)
        interests_df['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'] = interests_df['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è'].apply(classify_event_type)
        interests_df['–ü—Ä–æ–µ–∫—Ç_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'] = interests_df['–ü—Ä–æ–µ–∫—Ç'].apply(replace_project_values)
        interests_df['–ú–µ—Å—è—Ü'] = interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.to_period('M')
        interests_df['–ú–µ—Å—è—Ü_–≥–æ–¥'] = interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.strftime('%Y-%m')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫ - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–°—Å—ã–ª–∫–∞"
        def extract_date_from_link(link_text):
            if pd.isna(link_text):
                return None
            
            link_text = str(link_text)
            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–æ—Ç DD.MM.YYYY HH:MM:SS"
            import re
            match = re.search(r'–æ—Ç (\d{1,2})\.(\d{1,2})\.(\d{4})', link_text)
            if match:
                day, month, year = match.groups()
                try:
                    return datetime(int(year), int(month), int(day))
                except:
                    return None
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–°—Å—ã–ª–∫–∞"
        deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] = deals_df['–°—Å—ã–ª–∫–∞ (—Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ—á–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞)'].apply(extract_date_from_link)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 01.01.2024
        deals_df = deals_df[deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] >= start_date]
        
        deals_df['–ú–µ—Å—è—Ü'] = deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.to_period('M')
        deals_df['–ú–µ—Å—è—Ü_–≥–æ–¥'] = deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.strftime('%Y-%m')
        
        return interests_df, deals_df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

def create_monthly_summary(interests_df, deals_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ –º–µ—Å—è—Ü–∞–º"""
    if interests_df is None or deals_df is None:
        return None
    
    try:
        # –ü–æ–¥—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_interests = interests_df.groupby('–ú–µ—Å—è—Ü_–≥–æ–¥').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤')
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_unique_interests = []
        for month in interests_df['–ú–µ—Å—è—Ü_–≥–æ–¥'].unique():
            month_data = interests_df[interests_df['–ú–µ—Å—è—Ü_–≥–æ–¥'] == month]
            unique_count = get_unique_interests(month_data)
            monthly_unique_interests.append({
                '–ú–µ—Å—è—Ü_–≥–æ–¥': month,
                '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã': unique_count
            })
        
        monthly_unique_df = pd.DataFrame(monthly_unique_interests)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Å—ã–ª–∫–∏)
        monthly_deals = deals_df.groupby('–ú–µ—Å—è—Ü_–≥–æ–¥').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        monthly_summary = monthly_interests.merge(monthly_unique_df, on='–ú–µ—Å—è—Ü_–≥–æ–¥', how='outer')
        monthly_summary = monthly_summary.merge(monthly_deals, on='–ú–µ—Å—è—Ü_–≥–æ–¥', how='outer')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏
        monthly_summary = monthly_summary.fillna(0)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É
        monthly_summary = monthly_summary.sort_values('–ú–µ—Å—è—Ü_–≥–æ–¥')
        
        return monthly_summary
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return None

def create_monthly_chart(monthly_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ —Å–¥–µ–ª–∫–∞–º–∏"""
    if monthly_data is None or len(monthly_data) == 0:
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig = go.Figure()
        
        # –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–ª–µ–≤–∞—è –æ—Å—å Y)
        fig.add_trace(go.Scatter(
            x=monthly_data['–ú–µ—Å—è—Ü_–≥–æ–¥'],
            y=monthly_data['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã'],
            mode='lines+markers+text',
            name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã',
            line=dict(color='#86a7c8', width=4, shape='spline'),
            marker=dict(size=10, color='#86a7c8', line=dict(width=2, color='white')),
            text=monthly_data['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã'],
            textposition='top center',
            textfont=dict(size=13, color='#2c3e50', weight='bold'),
            hovertemplate='<b>%{x}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>',
            yaxis='y'
        ))
        
        # –õ–∏–Ω–∏—è —Å–¥–µ–ª–æ–∫ (–æ–¥–Ω–∞ –æ—Å—å Y)
        fig.add_trace(go.Scatter(
            x=monthly_data['–ú–µ—Å—è—Ü_–≥–æ–¥'],
            y=monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'],
            mode='lines+markers+text',
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫',
            line=dict(color='#eea591', width=3, shape='spline'),
            marker=dict(size=10, color='#eea591', line=dict(width=2, color='white')),
            text=monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'],
            textposition='bottom center',
            textfont=dict(size=12, color='#2c3e50', weight='bold'),
            hovertemplate='<b>%{x}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: %{y}<extra></extra>',
            yaxis='y'
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig.update_layout(
            title={
                'text': 'üìà –î–∏–Ω–∞–º–∏–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–¥–µ–ª–æ–∫ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 20, 'color': '#2c3e50'}
            },
            xaxis_title="–ú–µ—Å—è—Ü",
            height=500,
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(family="Arial", size=12),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1,
                bgcolor='rgba(255,255,255,0.8)',
                bordercolor='lightgray',
                borderwidth=1
            ),
            margin=dict(l=50, r=50, t=80, b=50),
            hovermode='x unified',
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–π –æ—Å–∏ Y
            yaxis=dict(
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                title_font=dict(color="#2c3e50"),
                tickfont=dict(color="#2c3e50"),
                showgrid=True,
                gridwidth=1,
                gridcolor='lightgray',
                zeroline=True,
                zerolinecolor='lightgray'
            )
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ X
        fig.update_xaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray',
            zeroline=False
        )
        
        return fig
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

def create_interest_types_chart(interests_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–∏–¥–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    if interests_df is None or len(interests_df) == 0:
        return None
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –≤–∏–¥–∞–º —Å–æ–±—ã—Ç–∏–π
        unique_interests_by_type = {}
        
        for event_type in interests_df['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'].unique():
            type_data = interests_df[interests_df['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'] == event_type]
            
            # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
            if event_type == '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ':
                unique_count = len(type_data)
            else:
                unique_count = get_unique_interests(type_data)
            
            unique_interests_by_type[event_type] = unique_count
        
        event_type_counts = pd.Series(unique_interests_by_type)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–æ–±—ã—Ç–∏–π
        colors = {
            '–°–∞–π—Ç': '#86a7c8',
            '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫': '#eea591', 
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ': '#5a7ca6',
            '–ü—Ä–æ—á–µ–µ': '#466494'
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut chart)
        fig = go.Figure()
        
        fig.add_trace(go.Pie(
            labels=event_type_counts.index,
            values=event_type_counts.values,
            hole=0.6,  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è donut chart
            marker_colors=[colors.get(event_type, '#cccccc') for event_type in event_type_counts.index],
            textinfo='label+percent+value',
            textposition='outside',
            textfont=dict(size=12, color='#2c3e50'),
            hovertemplate='<b>%{label}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title={
                'text': 'üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 18, 'color': '#2c3e50'}
            },
            height=500,
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(family="Arial", size=12),
            legend=dict(
                orientation="v",
                yanchor="middle",
                y=0.5,
                xanchor="left",
                x=1.02,
                bgcolor='rgba(255,255,255,0.8)',
                bordercolor='lightgray',
                borderwidth=1
            ),
            margin=dict(l=50, r=150, t=80, b=50),
            showlegend=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        total_unique_interests = event_type_counts.sum()
        fig.add_annotation(
            text=f"<b>{total_unique_interests}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤",
            x=0.5, y=0.5,
            xref="paper", yref="paper",
            showarrow=False,
            font=dict(size=16, color='#2c3e50'),
            align="center"
        )
        
        return fig
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return None

def create_interest_source_chart(interests_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    if interests_df is None or len(interests_df) == 0:
        return None
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞
        source_counts = interests_df['–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞'].value_counts()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        combined_sources = {}
        
        for source, count in source_counts.items():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã
            if source in ['–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥', '–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', '<>']:
                combined_sources['–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã'] = combined_sources.get('–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', 0) + count
            else:
                combined_sources[source] = count
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
        sorted_sources = dict(sorted(combined_sources.items(), key=lambda x: x[1], reverse=True))
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        top_sources = dict(list(sorted_sources.items())[:10])
        
        # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—ã–µ –Ω–∞ —è—Ä–∫–∏–µ)
        colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', 
                 '#1abc9c', '#e67e22', '#34495e', '#16a085', '#8e44ad']
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            y=list(top_sources.keys()),
            x=list(top_sources.values()),
            orientation='h',
            marker_color=colors[:len(top_sources)],
            text=list(top_sources.values()),
            textposition='auto',
            textfont=dict(size=12, color='#2c3e50', weight='bold'),
            hovertemplate='<b>%{y}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{x}<extra></extra>'
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title={
                'text': 'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 18, 'color': '#2c3e50'}
            },
            xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            height=500,
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(family="Arial", size=12),
            margin=dict(l=50, r=50, t=80, b=50),
            showlegend=False
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_xaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray',
            zeroline=True,
            zerolinecolor='lightgray'
        )
        
        fig.update_yaxes(
            showgrid=False,
            zeroline=False
        )
        
        return fig
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞: {e}")
        return None

def create_conversion_chart(monthly_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º)"""
    if monthly_data is None or len(monthly_data) == 0:
        return None
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        monthly_data['–ö–æ–Ω–≤–µ—Ä—Å–∏—è %'] = (monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'] / monthly_data['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã'] * 100).round(1)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        fig = go.Figure()
        
        # –°—Ç–æ–ª–±—Ü—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        fig.add_trace(go.Bar(
            x=monthly_data['–ú–µ—Å—è—Ü_–≥–æ–¥'],
            y=monthly_data['–ö–æ–Ω–≤–µ—Ä—Å–∏—è %'],
            name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è %',
            marker_color='#5a7ca6',
            opacity=0.8,
            text=monthly_data['–ö–æ–Ω–≤–µ—Ä—Å–∏—è %'].apply(lambda x: f"{x}%" if pd.notna(x) else "0%"),
            textposition='outside',
            textfont=dict(size=11, color='#2c3e50', weight='bold'),
            hovertemplate='<b>%{x}</b><br>–ö–æ–Ω–≤–µ—Ä—Å–∏—è: %{y:.1f}%<extra></extra>'
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title={
                'text': 'üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è (—Å–¥–µ–ª–∫–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã) –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 18, 'color': '#2c3e50'}
            },
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %",
            height=500,
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(family="Arial", size=12),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1,
                bgcolor='rgba(255,255,255,0.8)',
                bordercolor='lightgray',
                borderwidth=1
            ),
            margin=dict(l=50, r=50, t=80, b=50),
            hovermode='x unified'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_xaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray',
            zeroline=False
        )
        
        fig.update_yaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray',
            zeroline=True,
            zerolinecolor='lightgray',
            range=[0, max(monthly_data['–ö–æ–Ω–≤–µ—Ä—Å–∏—è %'].fillna(0)) * 1.2]
        )
        
        return fig
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")
        return None

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    interests_df, deals_df = load_and_process_data()
    
    # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è)
    with st.expander("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", expanded=False):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            uploaded_interests = st.file_uploader("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", type=['xlsx', 'xls'], key="interests_uploader")
            if uploaded_interests is not None:
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_interests.name}")
                st.caption(f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        with col2:
            uploaded_deals = st.file_uploader("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–¥–µ–ª–æ–∫", type=['xlsx', 'xls'], key="deals_uploader")
            if uploaded_deals is not None:
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_deals.name}")
                st.caption(f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary", use_container_width=True):
                st.cache_data.clear()
                st.rerun()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if uploaded_interests is not None or uploaded_deals is not None:
        interests_df, deals_df = load_and_process_data(uploaded_interests, uploaded_deals)
    
    if interests_df is not None and deals_df is not None:
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_summary = create_monthly_summary(interests_df, deals_df)
        
        if monthly_summary is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
            total_interests = monthly_summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'].sum()
            total_unique_interests = monthly_summary['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã'].sum()
            total_deals = monthly_summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'].sum()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é
            total_conversion = (total_deals / total_unique_interests * 100) if total_unique_interests > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
            cards = [
                {"label": "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", "value": str(total_interests)},
                {"label": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã", "value": str(total_unique_interests)},
                {"label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", "value": str(total_deals)},
                {"label": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–¥–µ–ª–æ–∫ –∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, %", "value": f"{total_conversion:.1f}%"},
            ]
            
            card_cols = st.columns(4)
            for card, col in zip(cards, card_cols):
                with col:
                    st.markdown(f"""
                    <div class="kpi-card">
                        <div class="kpi-card-label">{card['label']}</div>
                        <div class="kpi-card-value">{card['value']}</div>
                    </div>
                    """, unsafe_allow_html=True)
            

            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            chart = create_monthly_chart(monthly_summary)
            conversion_chart = create_conversion_chart(monthly_summary)
            interest_types_chart = create_interest_types_chart(interests_df)
            interest_source_chart = create_interest_source_chart(interests_df)
            
            if chart and conversion_chart:
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.plotly_chart(chart, use_container_width=True, key="main_chart")
                with col2:
                    st.plotly_chart(conversion_chart, use_container_width=True, key="conversion_chart_main")
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤–∏–¥–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if interest_types_chart and interest_source_chart:
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.plotly_chart(interest_types_chart, use_container_width=True, key="interest_types_main")
                with col2:
                    st.plotly_chart(interest_source_chart, use_container_width=True, key="interest_source_main")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—É—é)
            with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –º–µ—Å—è—Ü–∞–º"):
                st.dataframe(monthly_summary, use_container_width=True)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            st.markdown("---")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–ª–æ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ (2025)")
            st.markdown("*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞*")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
            def calculate_current_year_metrics(interests_df, deals_df):
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞
                current_year_data = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] >= pd.to_datetime('2025-01-01')]
                if len(current_year_data) > 0:
                    latest_date_2025 = current_year_data['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].max()
                else:
                    latest_date_2025 = pd.to_datetime('2025-01-01')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: —Å 1 —è–Ω–≤–∞—Ä—è –ø–æ —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É
                current_year_start = pd.to_datetime('2025-01-01')
                current_year_end = latest_date_2025
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2025 –≥–æ–¥ (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
                current_year_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] >= current_year_start) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] <= current_year_end)
                ]
                current_year_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] >= current_year_start) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] <= current_year_end)
                ]
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
                prev_year_start = pd.to_datetime('2024-01-01')
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ 2024 –≥–æ–¥–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ 2025
                days_diff = (current_year_end - current_year_start).days
                prev_year_end = prev_year_start + pd.Timedelta(days=days_diff)
                
                prev_year_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] >= prev_year_start) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] <= prev_year_end)
                ]
                prev_year_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] >= prev_year_start) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'] <= prev_year_end)
                ]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                current_interests = len(current_year_interests)
                current_unique_interests = get_unique_interests(current_year_interests)
                current_deals = len(current_year_deals)
                current_conversion = (current_deals / current_unique_interests * 100) if current_unique_interests > 0 else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞
                prev_interests = len(prev_year_interests)
                prev_unique_interests = get_unique_interests(prev_year_interests)
                prev_deals = len(prev_year_deals)
                prev_conversion = (prev_deals / prev_unique_interests * 100) if prev_unique_interests > 0 else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—ã
                def calculate_delta(current, previous):
                    if previous == 0:
                        return 0
                    return ((current - previous) / previous) * 100
                
                delta_interests = calculate_delta(current_interests, prev_interests)
                delta_unique = calculate_delta(current_unique_interests, prev_unique_interests)
                delta_deals = calculate_delta(current_deals, prev_deals)
                delta_conversion = calculate_delta(current_conversion, prev_conversion)
                
                return {
                    'interests': {'current': current_interests, 'delta': delta_interests},
                    'unique': {'current': current_unique_interests, 'delta': delta_unique},
                    'deals': {'current': current_deals, 'delta': delta_deals},
                    'conversion': {'current': current_conversion, 'delta': delta_conversion}
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            current_year_metrics = calculate_current_year_metrics(interests_df, deals_df)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
            def create_comparison_chart(interests_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –∏ 2025 –≥–æ–¥—ã
                interests_2024 = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == 2024].copy()
                interests_2025 = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == 2025].copy()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                interests_2024['–ú–µ—Å—è—Ü'] = interests_2024['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month
                interests_2025['–ú–µ—Å—è—Ü'] = interests_2025['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
                monthly_data_2024 = []
                monthly_data_2025 = []
                months_2025 = []
                
                # –î–ª—è 2024 –≥–æ–¥–∞ - –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤
                for month in range(1, 13):
                    month_data_2024 = interests_2024[interests_2024['–ú–µ—Å—è—Ü'] == month]
                    unique_2024 = get_unique_interests(month_data_2024)
                    monthly_data_2024.append(unique_2024)
                
                # –î–ª—è 2025 –≥–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                months_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
                max_month_2025 = interests_2025['–ú–µ—Å—è—Ü'].max() if len(interests_2025) > 0 else 0
                
                for month in range(1, max_month_2025 + 1):
                    month_data_2025 = interests_2025[interests_2025['–ú–µ—Å—è—Ü'] == month]
                    unique_2025 = get_unique_interests(month_data_2025)
                    monthly_data_2025.append(unique_2025)
                    months_2025.append(months_names[month - 1])
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                months_2024 = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
                
                fig = go.Figure()
                
                # –õ–∏–Ω–∏—è –¥–ª—è 2024 –≥–æ–¥–∞
                fig.add_trace(go.Scatter(
                    x=months_2024,
                    y=monthly_data_2024,
                    mode='lines+markers+text',
                    name='2024 –≥–æ–¥',
                    line=dict(color='#86a7c8', width=3, shape='spline'),
                    marker=dict(size=8, color='#86a7c8'),
                    text=monthly_data_2024,
                    textposition='top center',
                    textfont=dict(size=11, color='#2c3e50'),
                    hovertemplate='<b>%{x} 2024</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>'
                ))
                
                # –õ–∏–Ω–∏—è –¥–ª—è 2025 –≥–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                if len(monthly_data_2025) > 0:
                    fig.add_trace(go.Scatter(
                        x=months_2025,
                        y=monthly_data_2025,
                        mode='lines+markers+text',
                        name='2025 –≥–æ–¥',
                        line=dict(color='#eea591', width=3, shape='spline'),
                        marker=dict(size=8, color='#eea591'),
                        text=monthly_data_2025,
                        textposition='bottom center',
                        textfont=dict(size=11, color='#2c3e50'),
                        hovertemplate='<b>%{x} 2025</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>'
                    ))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
                fig.update_layout(
                    title={
                        'text': 'üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (2024 vs 2025)',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12, color='#2c3e50'),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=50, r=50, t=80, b=50),
                    hovermode='x unified'
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=False
                )
                
                fig.update_yaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
            def create_deals_comparison_chart(deals_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –∏ 2025 –≥–æ–¥—ã
                deals_2024 = deals_df[deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == 2024].copy()
                deals_2025 = deals_df[deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == 2025].copy()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                deals_2024['–ú–µ—Å—è—Ü'] = deals_2024['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month
                deals_2025['–ú–µ—Å—è—Ü'] = deals_2025['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
                monthly_deals_2024 = []
                monthly_deals_2025 = []
                months_2025 = []
                
                # –î–ª—è 2024 –≥–æ–¥–∞ - –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤
                for month in range(1, 13):
                    month_data_2024 = deals_2024[deals_2024['–ú–µ—Å—è—Ü'] == month]
                    deals_count_2024 = len(month_data_2024)
                    monthly_deals_2024.append(deals_count_2024)
                
                # –î–ª—è 2025 –≥–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                months_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
                max_month_2025 = deals_2025['–ú–µ—Å—è—Ü'].max() if len(deals_2025) > 0 else 0
                
                for month in range(1, max_month_2025 + 1):
                    month_data_2025 = deals_2025[deals_2025['–ú–µ—Å—è—Ü'] == month]
                    deals_count_2025 = len(month_data_2025)
                    monthly_deals_2025.append(deals_count_2025)
                    months_2025.append(months_names[month - 1])
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                months_2024 = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
                
                fig = go.Figure()
                
                # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è 2024 –≥–æ–¥–∞
                fig.add_trace(go.Bar(
                    x=months_2024,
                    y=monthly_deals_2024,
                    name='2024 –≥–æ–¥',
                    marker_color='#86a7c8',
                    text=monthly_deals_2024,
                    textposition='outside',
                    textfont=dict(size=11, color='#2c3e50'),
                    hovertemplate='<b>%{x} 2024</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: %{y}<extra></extra>'
                ))
                
                # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è 2025 –≥–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                if len(monthly_deals_2025) > 0:
                    fig.add_trace(go.Bar(
                        x=months_2025,
                        y=monthly_deals_2025,
                        name='2025 –≥–æ–¥',
                        marker_color='#eea591',
                        text=monthly_deals_2025,
                        textposition='outside',
                        textfont=dict(size=11, color='#2c3e50'),
                        hovertemplate='<b>%{x} 2025</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: %{y}<extra></extra>'
                    ))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
                fig.update_layout(
                    title={
                        'text': 'üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º (2024 vs 2025)',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12, color='#2c3e50'),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=50, r=50, t=80, b=50),
                    hovermode='x unified',
                    barmode='group'  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=False
                )
                
                fig.update_yaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–µ–ª—å—Ç–æ–π
            current_cards = [
                {
                    "label": "–ò–Ω—Ç–µ—Ä–µ—Å—ã (2025)",
                    "value": str(current_year_metrics['interests']['current']),
                    "delta": f"{current_year_metrics['interests']['delta']:+.1f}%",
                    "metric": "interests",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å 2024 –≥–æ–¥–æ–º"
                },
                {
                    "label": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (2025)",
                    "value": str(current_year_metrics['unique']['current']),
                    "delta": f"{current_year_metrics['unique']['delta']:+.1f}%",
                    "metric": "unique",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å 2024 –≥–æ–¥–æ–º"
                },
                {
                    "label": "–°–¥–µ–ª–∫–∏ (2025)",
                    "value": str(current_year_metrics['deals']['current']),
                    "delta": f"{current_year_metrics['deals']['delta']:+.1f}%",
                    "metric": "deals",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å 2024 –≥–æ–¥–æ–º"
                },
                {
                    "label": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è (2025)",
                    "value": f"{current_year_metrics['conversion']['current']:.1f}%",
                    "delta": f"{current_year_metrics['conversion']['delta']:+.1f}%",
                    "metric": "conversion",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å 2024 –≥–æ–¥–æ–º"
                },
            ]
            
            cols = st.columns(4)
            for card, col in zip(current_cards, cols):
                with col:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –¥–µ–ª—å—Ç—ã
                    delta_color = "#3b82f6" if current_year_metrics[card['metric']]['delta'] >= 0 else "#ef4444"
                    
                    st.markdown(f"""
                    <div class="kpi-card-delta">
                        <div class="kpi-label">{card['label']}</div>
                        <div class="kpi-value">{card['value']}</div>
                        <div style="color: {delta_color} !important; font-size: 1rem; margin-bottom: 3px; font-weight: 500; display: block;">{card['delta']}</div>
                        <div class="kpi-caption">{card['caption']}</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_chart = create_comparison_chart(interests_df)
            deals_comparison_chart = create_deals_comparison_chart(deals_df)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä—è–¥–æ–º
            if comparison_chart and deals_comparison_chart:
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.plotly_chart(comparison_chart, use_container_width=True, key="comparison_chart")
                with col2:
                    st.plotly_chart(deals_comparison_chart, use_container_width=True, key="deals_comparison_chart")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ (2025)
            def create_current_year_interest_types_chart(interests_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ 2025 –≥–æ–¥
                current_year_interests = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == 2025]
                
                if len(current_year_interests) == 0:
                    return None
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –≤–∏–¥–∞–º —Å–æ–±—ã—Ç–∏–π
                event_unique_interests = {}
                
                for event_type in current_year_interests['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'].unique():
                    event_data = current_year_interests[current_year_interests['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'] == event_type]
                    unique_count = get_unique_interests(event_data)
                    event_unique_interests[event_type] = unique_count
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                event_counts = pd.Series(event_unique_interests)
                
                # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–æ–±—ã—Ç–∏–π
                colors = {
                    '–°–∞–π—Ç': '#86a7c8',
                    '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫': '#eea591', 
                    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ': '#5a7ca6',
                    '–ü—Ä–æ—á–µ–µ': '#466494'
                }
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut chart)
                fig = go.Figure()
                
                fig.add_trace(go.Pie(
                    labels=event_counts.index,
                    values=event_counts.values,
                    hole=0.6,  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è donut chart
                    marker_colors=[colors.get(event_type, '#cccccc') for event_type in event_counts.index],
                    textinfo='label+percent+value',
                    textposition='outside',
                    textfont=dict(size=12, color='#2c3e50'),
                    hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                ))
                
                fig.update_layout(
                    title={
                        'text': 'üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (2025)',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 16, 'color': '#2c3e50'}
                    },
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12, color='#2c3e50'),
                    legend=dict(
                        orientation="v",
                        yanchor="middle",
                        y=0.5,
                        xanchor="left",
                        x=1.02,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=20, r=150, t=60, b=20),
                    showlegend=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                total_count = event_counts.sum()
                fig.add_annotation(
                    text=f"<b>{total_count}</b><br>–ò–Ω—Ç–µ—Ä–µ—Å–æ–≤",
                    x=0.5, y=0.5,
                    xref="paper", yref="paper",
                    showarrow=False,
                    font=dict(size=14, color='#2c3e50'),
                    align="center"
                )
                
                return fig
            
            def create_current_year_interest_source_chart(interests_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ 2025 –≥–æ–¥
                current_year_interests = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == 2025]
                
                if len(current_year_interests) == 0:
                    return None
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞
                source_counts = current_year_interests['–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞'].value_counts()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                combined_sources = {}
                
                for source, count in source_counts.items():
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã
                    if source in ['–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥', '–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', '<>']:
                        combined_sources['–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã'] = combined_sources.get('–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', 0) + count
                    else:
                        combined_sources[source] = count
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
                sorted_sources = dict(sorted(combined_sources.items(), key=lambda x: x[1], reverse=True))
                
                # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                top_sources = dict(list(sorted_sources.items())[:10])
                
                # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—ã–µ –Ω–∞ —è—Ä–∫–∏–µ)
                colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', 
                         '#1abc9c', '#e67e22', '#34495e', '#16a085', '#8e44ad']
                
                # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    y=list(top_sources.keys()),
                    x=list(top_sources.values()),
                    orientation='h',
                    marker_color=colors[:len(top_sources)],
                    text=list(top_sources.values()),
                    textposition='auto',
                    textfont=dict(size=12, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>%{y}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{x}<extra></extra>'
                ))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
                fig.update_layout(
                    title={
                        'text': 'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (2025)',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    height=500,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12),
                    margin=dict(l=50, r=50, t=80, b=50),
                    showlegend=False
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                fig.update_yaxes(
                    showgrid=False,
                    zeroline=False
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            current_year_interest_types_chart = create_current_year_interest_types_chart(interests_df)
            current_year_interest_source_chart = create_current_year_interest_source_chart(interests_df)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ç—Ä–µ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            if current_year_interest_types_chart and current_year_interest_source_chart:
                col1, col2, col3 = st.columns([1, 1, 1])
                with col1:
                    st.plotly_chart(current_year_interest_types_chart, use_container_width=True, key="interest_types_current_year")
                with col2:
                    st.plotly_chart(current_year_interest_source_chart, use_container_width=True, key="interest_source_current_year")
                with col3:
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∑–∞ 2025
                    def create_current_year_project_interests_chart(interests_df):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ 2025 –≥–æ–¥
                        current_year_interests = interests_df[interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == 2025]
                        
                        if len(current_year_interests) == 0:
                            return None
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                        project_unique_interests = {}
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è NaN
                        all_projects = current_year_interests['–ü—Ä–æ–µ–∫—Ç_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'].dropna().unique()
                        all_projects = list(all_projects) + ['–ü—É—Å—Ç–æ–π']  # –î–æ–±–∞–≤–ª—è–µ–º "–ü—É—Å—Ç–æ–π" —è–≤–Ω–æ
                        
                        for project in all_projects:
                            if project == '–ü—É—Å—Ç–æ–π':
                                # –î–ª—è –ø—É—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ—Ä–µ–º –∑–∞–ø–∏—Å–∏ —Å NaN –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
                                project_data = current_year_interests[current_year_interests['–ü—Ä–æ–µ–∫—Ç'].isna()]
                            else:
                                project_data = current_year_interests[current_year_interests['–ü—Ä–æ–µ–∫—Ç_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'] == project]
                            
                            if len(project_data) > 0:
                                unique_count = get_unique_interests(project_data)
                                project_unique_interests[project] = unique_count
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                        sorted_projects = dict(sorted(project_unique_interests.items(), key=lambda x: x[1], reverse=True))
                        
                        # –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                        colors = {
                            '–ö—Ä–æ–≤–ª—è –∏ –§–∞—Å–∞–¥—ã': '#3498db',
                            '–ê–Ω–≥–∞—Ä—ã': '#e74c3c',
                            '–ë–ª–æ–∫–∏': '#2ecc71',
                            '–î–æ–º–∞': '#f39c12',
                            '–°–Ω–∞–±–∂–µ–Ω–∏–µ': '#9b59b6',
                            '–§–∞—Å–∞–¥—ã': '#1abc9c',
                            '–ü—É—Å—Ç–æ–π': '#95a5a6'
                        }
                        
                        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut chart)
                        fig = go.Figure()
                        
                        fig.add_trace(go.Pie(
                            labels=list(sorted_projects.keys()),
                            values=list(sorted_projects.values()),
                            hole=0,  # –£–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ - –æ–±—ã—á–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                            marker_colors=[colors.get(project, '#cccccc') for project in sorted_projects.keys()],
                            textinfo='label+percent+value',
                            textposition='outside',
                            textfont=dict(size=12, color='#2c3e50'),
                            hovertemplate='<b>%{label}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                        ))
                        
                        fig.update_layout(
                            title={
                                'text': 'üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É (2025)',
                                'x': 0.5,
                                'xanchor': 'center',
                                'font': {'size': 16, 'color': '#2c3e50'}
                            },
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            font=dict(family="Arial", size=12, color='#2c3e50'),
                            legend=dict(
                                orientation="v",
                                yanchor="middle",
                                y=0.5,
                                xanchor="left",
                                x=1.02,
                                bgcolor='rgba(255,255,255,0.8)',
                                bordercolor='lightgray',
                                borderwidth=1
                            ),
                            margin=dict(l=20, r=150, t=60, b=20),
                            showlegend=True
                        )
                        
                        # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                        
                        return fig
                    
                    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    current_year_project_chart = create_current_year_project_interests_chart(interests_df)
                    if current_year_project_chart:
                        st.plotly_chart(current_year_project_chart, use_container_width=True, key="project_interests_current_year")
                    else:
                        st.markdown("### üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É")
                        st.markdown("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 2025 –≥–æ–¥–∞*")
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            st.markdown("---")
            
            # –ë–ª–æ–∫ "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            st.subheader("üìÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–µ–ª—å—Ç–æ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            def calculate_current_month_metrics(interests_df, deals_df):
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
                current_date = datetime.now()
                current_month = current_date.month
                current_year = current_date.year
                current_day = current_date.day
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                current_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_month)
                ]
                
                current_month_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == current_year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_month)
                ]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                if len(current_month_interests) > 0:
                    last_day_with_data = current_month_interests['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.day.max()
                elif len(current_month_deals) > 0:
                    last_day_with_data = current_month_deals['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.day.max()
                else:
                    last_day_with_data = current_day
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
                end_day = min(current_day, last_day_with_data)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                current_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_month) &
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.day <= end_day)
                ]
                
                current_month_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == current_year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_month) &
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.day <= end_day)
                ]
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                prev_year = current_year - 1
                
                prev_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == prev_year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_month) &
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.day <= end_day)
                ]
                
                prev_month_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == prev_year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_month) &
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.day <= end_day)
                ]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                current_interests = len(current_month_interests)
                current_unique = get_unique_interests(current_month_interests)
                current_deals = len(current_month_deals)
                current_conversion = (current_deals / current_unique * 100) if current_unique > 0 else 0
                
                prev_interests = len(prev_month_interests)
                prev_unique = get_unique_interests(prev_month_interests)
                prev_deals = len(prev_month_deals)
                prev_conversion = (prev_deals / prev_unique * 100) if prev_unique > 0 else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—ã
                def calculate_delta(current, previous):
                    if previous == 0:
                        return 100 if current > 0 else 0
                    return ((current - previous) / previous) * 100
                
                return {
                    'interests': {
                        'current': current_interests,
                        'previous': prev_interests,
                        'delta': calculate_delta(current_interests, prev_interests)
                    },
                    'unique': {
                        'current': current_unique,
                        'previous': prev_unique,
                        'delta': calculate_delta(current_unique, prev_unique)
                    },
                    'deals': {
                        'current': current_deals,
                        'previous': prev_deals,
                        'delta': calculate_delta(current_deals, prev_deals)
                    },
                    'conversion': {
                        'current': current_conversion,
                        'previous': prev_conversion,
                        'delta': calculate_delta(current_conversion, prev_conversion)
                    }
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–µ–ª—å—Ç–æ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_month_metrics = calculate_current_month_metrics(interests_df, deals_df)
            
            current_month_cards = [
                {
                    "label": "–ò–Ω—Ç–µ—Ä–µ—Å—ã (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)",
                    "value": str(current_month_metrics['interests']['current']),
                    "delta": f"{current_month_metrics['interests']['delta']:+.1f}%",
                    "metric": "interests",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞"
                },
                {
                    "label": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)",
                    "value": str(current_month_metrics['unique']['current']),
                    "delta": f"{current_month_metrics['unique']['delta']:+.1f}%",
                    "metric": "unique",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞"
                },
                {
                    "label": "–°–¥–µ–ª–∫–∏ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)",
                    "value": str(current_month_metrics['deals']['current']),
                    "delta": f"{current_month_metrics['deals']['delta']:+.1f}%",
                    "metric": "deals",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞"
                },
                {
                    "label": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)",
                    "value": f"{current_month_metrics['conversion']['current']:.1f}%",
                    "delta": f"{current_month_metrics['conversion']['delta']:+.1f}%",
                    "metric": "conversion",
                    "caption": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞"
                },
            ]
            
            cols = st.columns(4)
            for card, col in zip(current_month_cards, cols):
                with col:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –¥–µ–ª—å—Ç—ã
                    delta_color = "#3b82f6" if current_month_metrics[card['metric']]['delta'] >= 0 else "#ef4444"
                    
                    st.markdown(f"""
                    <div class="kpi-card-delta">
                        <div class="kpi-label">{card['label']}</div>
                        <div class="kpi-value">{card['value']}</div>
                        <div style="color: {delta_color} !important; font-size: 1rem; margin-bottom: 3px; font-weight: 500; display: block;">{card['delta']}</div>
                        <div class="kpi-caption">{card['caption']}</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            def create_current_month_interest_types_chart(interests_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                current_date = datetime.now()
                current_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_date.year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_date.month)
                ]
                
                if len(current_month_interests) == 0:
                    return None
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –≤–∏–¥–∞–º —Å–æ–±—ã—Ç–∏–π
                event_unique_interests = {}
                
                for event_type in current_month_interests['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'].unique():
                    event_data = current_month_interests[current_month_interests['–í–∏–¥ —Å–æ–±—ã—Ç–∏—è_–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'] == event_type]
                    unique_count = get_unique_interests(event_data)
                    event_unique_interests[event_type] = unique_count
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                event_counts = pd.Series(event_unique_interests)
                
                # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–æ–±—ã—Ç–∏–π
                colors = {
                    '–°–∞–π—Ç': '#86a7c8',
                    '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫': '#eea591', 
                    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ': '#5a7ca6',
                    '–ü—Ä–æ—á–µ–µ': '#466494'
                }
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut chart)
                fig = go.Figure()
                
                fig.add_trace(go.Pie(
                    labels=event_counts.index,
                    values=event_counts.values,
                    hole=0.6,  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è donut chart
                    marker_colors=[colors.get(event_type, '#cccccc') for event_type in event_counts.index],
                    textinfo='label+percent+value',
                    textposition='outside',
                    textfont=dict(size=12, color='#2c3e50'),
                    hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                ))
                
                fig.update_layout(
                    title={
                        'text': f'üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ({current_date.strftime("%B %Y")})',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 16, 'color': '#2c3e50'}
                    },
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12, color='#2c3e50'),
                    legend=dict(
                        orientation="v",
                        yanchor="middle",
                        y=0.5,
                        xanchor="left",
                        x=1.02,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=20, r=150, t=60, b=20),
                    showlegend=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                total_count = event_counts.sum()
                fig.add_annotation(
                    text=f"<b>{total_count}</b><br>–ò–Ω—Ç–µ—Ä–µ—Å–æ–≤",
                    x=0.5, y=0.5,
                    xref="paper", yref="paper",
                    showarrow=False,
                    font=dict(size=14, color='#2c3e50'),
                    align="center"
                )
                
                return fig
            
            def create_current_month_interest_source_chart(interests_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                current_date = datetime.now()
                current_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_date.year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_date.month)
                ]
                
                if len(current_month_interests) == 0:
                    return None
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞
                source_counts = current_month_interests['–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞'].value_counts()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                combined_sources = {}
                
                for source, count in source_counts.items():
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã
                    if source in ['–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥', '–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', '<>']:
                        combined_sources['–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã'] = combined_sources.get('–ü—Ä—è–º—ã–µ –∑–∞—Ö–æ–¥—ã', 0) + count
                    else:
                        combined_sources[source] = count
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
                sorted_sources = dict(sorted(combined_sources.items(), key=lambda x: x[1], reverse=True))
                
                # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                top_sources = dict(list(sorted_sources.items())[:10])
                
                # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—ã–µ –Ω–∞ —è—Ä–∫–∏–µ)
                colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', 
                         '#1abc9c', '#e67e22', '#34495e', '#16a085', '#8e44ad']
                
                # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    y=list(top_sources.keys()),
                    x=list(top_sources.values()),
                    orientation='h',
                    marker_color=colors[:len(top_sources)],
                    text=list(top_sources.values()),
                    textposition='auto',
                    textfont=dict(size=12, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>%{y}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{x}<extra></extra>'
                ))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
                fig.update_layout(
                    title={
                        'text': f'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ({current_date.strftime("%B %Y")})',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    height=500,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12),
                    margin=dict(l=50, r=50, t=80, b=50),
                    showlegend=False
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                fig.update_yaxes(
                    showgrid=False,
                    zeroline=False
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_month_interest_types_chart = create_current_month_interest_types_chart(interests_df)
            current_month_interest_source_chart = create_current_month_interest_source_chart(interests_df)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            def create_current_month_comparison_chart(interests_df):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
                current_date = datetime.now()
                current_month = current_date.month
                current_year = current_date.year
                prev_year = current_year - 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                current_day = current_date.day
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ (1-31)
                days = list(range(1, 32))
                
                # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                current_month_data = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_month)
                ]
                
                # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                prev_month_data = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == prev_year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_month)
                ]
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –¥–Ω—è–º
                current_daily_interests = []
                prev_daily_interests = []
                valid_days = []
                
                for day in days:
                    # –¢–µ–∫—É—â–∏–π –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    if day <= current_day:
                        day_data_current = current_month_data[
                            current_month_data['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.day == day
                        ]
                        current_count = get_unique_interests(day_data_current)
                    else:
                        current_count = 0
                    
                    # –ü—Ä–æ—à–ª—ã–π –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
                    day_data_prev = prev_month_data[
                        prev_month_data['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.day == day
                    ]
                    prev_count = get_unique_interests(day_data_prev)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –∏–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
                    if prev_count > 0 or (day <= current_day and current_count > 0):
                        current_daily_interests.append(current_count)
                        prev_daily_interests.append(prev_count)
                        valid_days.append(day)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                fig = go.Figure()
                
                # –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                fig.add_trace(go.Scatter(
                    x=valid_days,
                    y=current_daily_interests,
                    mode='lines+markers+text',
                    name=f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã ({current_year})',
                    line=dict(color='#3498db', width=4, shape='spline'),
                    marker=dict(size=8, color='#3498db', line=dict(width=2, color='white')),
                    text=current_daily_interests,
                    textposition='top center',
                    textfont=dict(size=10, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>–î–µ–Ω—å %{x}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>'
                ))
                
                # –õ–∏–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                fig.add_trace(go.Scatter(
                    x=valid_days,
                    y=prev_daily_interests,
                    mode='lines+markers+text',
                    name=f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã ({prev_year})',
                    line=dict(color='#e74c3c', width=3, shape='spline'),
                    marker=dict(size=8, color='#e74c3c', line=dict(width=2, color='white')),
                    text=prev_daily_interests,
                    textposition='bottom center',
                    textfont=dict(size=10, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>–î–µ–Ω—å %{x}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>'
                ))
                
                fig.update_layout(
                    title={
                        'text': f'üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –¥–Ω—è–º ({current_date.strftime("%B")})',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    xaxis_title="–î–µ–Ω—å –º–µ—Å—è—Ü–∞",
                    yaxis_title="–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
                    height=500,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=50, r=50, t=80, b=50),
                    hovermode='x unified'
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=False,
                    range=[0.5, 31.5]
                )
                
                fig.update_yaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                return fig
            
            def create_current_month_deals_comparison_chart(deals_df):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
                current_date = datetime.now()
                current_month = current_date.month
                current_year = current_date.year
                prev_year = current_year - 1
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É 1-31 –¥–µ–Ω—å
                days = list(range(1, 32))
                
                # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                current_month_data = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == current_year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_month)
                ]
                
                # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                prev_month_data = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == prev_year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_month)
                ]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                current_day = current_date.day
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –¥–Ω—è–º
                current_daily_deals = []
                prev_daily_deals = []
                valid_days = []
                
                for day in days:
                    # –¢–µ–∫—É—â–∏–π –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    if day <= current_day:
                        day_data_current = current_month_data[
                            current_month_data['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.day == day
                        ]
                        current_count = len(day_data_current)
                    else:
                        current_count = 0
                    
                    # –ü—Ä–æ—à–ª—ã–π –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
                    day_data_prev = prev_month_data[
                        prev_month_data['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.day == day
                    ]
                    prev_count = len(day_data_prev)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –∏–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
                    if prev_count > 0 or (day <= current_day and current_count > 0):
                        current_daily_deals.append(current_count)
                        prev_daily_deals.append(prev_count)
                        valid_days.append(day)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                fig = go.Figure()
                
                # –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                fig.add_trace(go.Scatter(
                    x=valid_days,
                    y=current_daily_deals,
                    mode='lines+markers+text',
                    name=f'–°–¥–µ–ª–∫–∏ ({current_year})',
                    line=dict(color='#2ecc71', width=4, shape='spline'),
                    marker=dict(size=8, color='#2ecc71', line=dict(width=2, color='white')),
                    text=current_daily_deals,
                    textposition='top center',
                    textfont=dict(size=10, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>–î–µ–Ω—å %{x}</b><br>–°–¥–µ–ª–∫–∏: %{y}<extra></extra>'
                ))
                
                # –õ–∏–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                fig.add_trace(go.Scatter(
                    x=valid_days,
                    y=prev_daily_deals,
                    mode='lines+markers+text',
                    name=f'–°–¥–µ–ª–∫–∏ ({prev_year})',
                    line=dict(color='#f39c12', width=3, shape='spline'),
                    marker=dict(size=8, color='#f39c12', line=dict(width=2, color='white')),
                    text=prev_daily_deals,
                    textposition='bottom center',
                    textfont=dict(size=10, color='#2c3e50', weight='bold'),
                    hovertemplate='<b>–î–µ–Ω—å %{x}</b><br>–°–¥–µ–ª–∫–∏: %{y}<extra></extra>'
                ))
                
                fig.update_layout(
                    title={
                        'text': f'üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–Ω—è–º ({current_date.strftime("%B")})',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    xaxis_title="–î–µ–Ω—å –º–µ—Å—è—Ü–∞",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
                    height=500,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=50, r=50, t=80, b=50),
                    hovermode='x unified'
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=False,
                    range=[0.5, 31.5]
                )
                
                fig.update_yaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_month_comparison_chart = create_current_month_comparison_chart(interests_df)
            current_month_deals_comparison_chart = create_current_month_deals_comparison_chart(deals_df)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä—è–¥–æ–º
            if current_month_comparison_chart and current_month_deals_comparison_chart:
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.plotly_chart(current_month_comparison_chart, use_container_width=True, key="comparison_current_month")
                with col2:
                    st.plotly_chart(current_month_deals_comparison_chart, use_container_width=True, key="deals_comparison_current_month")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ç—Ä–µ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            if current_month_interest_types_chart and current_month_interest_source_chart:
                col1, col2, col3 = st.columns([1, 1, 1])
                with col1:
                    st.plotly_chart(current_month_interest_types_chart, use_container_width=True, key="interest_types_current_month")
                with col2:
                    st.plotly_chart(current_month_interest_source_chart, use_container_width=True, key="interest_source_current_month")
                with col3:
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                    def create_current_month_project_interests_chart(interests_df):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                        current_date = datetime.now()
                        current_month_interests = interests_df[
                            (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_date.year) & 
                            (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_date.month)
                        ]
                        
                        if len(current_month_interests) == 0:
                            return None
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                        project_unique_interests = {}
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è NaN
                        all_projects = current_month_interests['–ü—Ä–æ–µ–∫—Ç_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'].dropna().unique()
                        all_projects = list(all_projects) + ['–ü—É—Å—Ç–æ–π']  # –î–æ–±–∞–≤–ª—è–µ–º "–ü—É—Å—Ç–æ–π" —è–≤–Ω–æ
                        
                        for project in all_projects:
                            if project == '–ü—É—Å—Ç–æ–π':
                                # –î–ª—è –ø—É—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ—Ä–µ–º –∑–∞–ø–∏—Å–∏ —Å NaN –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
                                project_data = current_month_interests[current_month_interests['–ü—Ä–æ–µ–∫—Ç'].isna()]
                            else:
                                project_data = current_month_interests[current_month_interests['–ü—Ä–æ–µ–∫—Ç_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'] == project]
                            
                            if len(project_data) > 0:
                                unique_count = get_unique_interests(project_data)
                                project_unique_interests[project] = unique_count
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                        sorted_projects = dict(sorted(project_unique_interests.items(), key=lambda x: x[1], reverse=True))
                        
                        # –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                        colors = {
                            '–ö—Ä–æ–≤–ª—è –∏ –§–∞—Å–∞–¥—ã': '#3498db',
                            '–ê–Ω–≥–∞—Ä—ã': '#e74c3c',
                            '–ë–ª–æ–∫–∏': '#2ecc71',
                            '–î–æ–º–∞': '#f39c12',
                            '–°–Ω–∞–±–∂–µ–Ω–∏–µ': '#9b59b6',
                            '–§–∞—Å–∞–¥—ã': '#1abc9c',
                            '–ü—É—Å—Ç–æ–π': '#95a5a6'
                        }
                        
                        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut chart)
                        fig = go.Figure()
                        
                        fig.add_trace(go.Pie(
                            labels=list(sorted_projects.keys()),
                            values=list(sorted_projects.values()),
                            hole=0,  # –£–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ - –æ–±—ã—á–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                            marker_colors=[colors.get(project, '#cccccc') for project in sorted_projects.keys()],
                            textinfo='label+percent+value',
                            textposition='outside',
                            textfont=dict(size=12, color='#2c3e50'),
                            hovertemplate='<b>%{label}</b><br>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                        ))
                        
                        fig.update_layout(
                            title={
                                'text': f'üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É ({current_date.strftime("%B %Y")})',
                                'x': 0.5,
                                'xanchor': 'center',
                                'font': {'size': 16, 'color': '#2c3e50'}
                            },
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            font=dict(family="Arial", size=12, color='#2c3e50'),
                            legend=dict(
                                orientation="v",
                                yanchor="middle",
                                y=0.5,
                                xanchor="left",
                                x=1.02,
                                bgcolor='rgba(255,255,255,0.8)',
                                bordercolor='lightgray',
                                borderwidth=1
                            ),
                            margin=dict(l=20, r=150, t=60, b=20),
                            showlegend=True
                        )
                        
                        # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                        
                        return fig
                    
                    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    current_month_project_chart = create_current_month_project_interests_chart(interests_df)
                    if current_month_project_chart:
                        st.plotly_chart(current_month_project_chart, use_container_width=True, key="project_interests_current_month")
                    else:
                        st.markdown("### üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É")
                        st.markdown("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞*")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            def create_current_month_manager_chart(interests_df, deals_df):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                current_date = datetime.now()
                current_month_interests = interests_df[
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.year == current_date.year) & 
                    (interests_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.month == current_date.month)
                ]
                
                current_month_deals = deals_df[
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.year == current_date.year) & 
                    (deals_df['–î–∞—Ç–∞_–∏–∑_—Å—Å—ã–ª–∫–∏'].dt.month == current_date.month)
                ]
                
                if len(current_month_interests) == 0 and len(current_month_deals) == 0:
                    return None
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–¥–µ–ª–∫–∏ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
                manager_data = {}
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
                for _, row in current_month_interests.iterrows():
                    manager = row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    if manager not in manager_data:
                        manager_data[manager] = {'interests': 0, 'deals': 0}
                    manager_data[manager]['interests'] += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏
                for _, row in current_month_deals.iterrows():
                    manager = row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    if manager not in manager_data:
                        manager_data[manager] = {'interests': 0, 'deals': 0}
                    manager_data[manager]['deals'] += 1
                
                if not manager_data:
                    return None
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ '–ú–∞—Ç—Ä–µ–Ω–∏–Ω–∞' –∏ '–°–æ–∫—Ä—É—Ç–µ–Ω–∫–æ'
                manager_data = {k: v for k, v in manager_data.items() if '–ú–∞—Ç—Ä–µ–Ω–∏–Ω–∞' not in str(k) and '–°–æ–∫—Ä—É—Ç–µ–Ω–∫–æ' not in str(k)}
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ —Å–¥–µ–ª–∫–∞–º (—É–±—ã–≤–∞–Ω–∏–µ)
                sorted_managers = sorted(manager_data.items(), key=lambda x: (-x[1]['interests'], -x[1]['deals']))
                managers = [m[0] for m in sorted_managers]
                interests_counts = [m[1]['interests'] for m in sorted_managers]
                deals_counts = [m[1]['deals'] for m in sorted_managers]
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏
                fig = go.Figure()
                
                # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                fig.add_trace(go.Bar(
                    x=managers,
                    y=interests_counts,
                    name='–ò–Ω—Ç–µ—Ä–µ—Å—ã',
                    marker_color='#3498db',
                    text=interests_counts,
                    textposition='auto',
                    textfont=dict(size=12, color='white', weight='bold'),
                    hovertemplate='<b>%{x}</b><br>–ò–Ω—Ç–µ—Ä–µ—Å—ã: %{y}<extra></extra>'
                ))
                
                # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–¥–µ–ª–æ–∫
                fig.add_trace(go.Bar(
                    x=managers,
                    y=deals_counts,
                    name='–°–¥–µ–ª–∫–∏',
                    marker_color='#e74c3c',
                    text=deals_counts,
                    textposition='auto',
                    textfont=dict(size=12, color='white', weight='bold'),
                    hovertemplate='<b>%{x}</b><br>–°–¥–µ–ª–∫–∏: %{y}<extra></extra>'
                ))
                
                fig.update_layout(
                    title={
                        'text': f'üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–¥–µ–ª–∫–∏ ({current_date.strftime("%B %Y")})',
                        'x': 0.5,
                        'xanchor': 'center',
                        'font': {'size': 18, 'color': '#2c3e50'}
                    },
                    xaxis_title="–ú–µ–Ω–µ–¥–∂–µ—Ä",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    height=500,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Arial", size=12),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        bgcolor='rgba(255,255,255,0.8)',
                        bordercolor='lightgray',
                        borderwidth=1
                    ),
                    margin=dict(l=50, r=50, t=80, b=50),
                    barmode='group'  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
                fig.update_xaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=False
                )
                
                fig.update_yaxes(
                    showgrid=True,
                    gridwidth=1,
                    gridcolor='lightgray',
                    zeroline=True,
                    zerolinecolor='lightgray'
                )
                
                return fig
            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            current_month_manager_chart = create_current_month_manager_chart(interests_df, deals_df)
            if current_month_manager_chart:
                st.plotly_chart(current_month_manager_chart, use_container_width=True, key="manager_chart_current_month")
            else:
                st.markdown("### üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–¥–µ–ª–∫–∏")
                st.markdown("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞*")
    
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ Excel.")

if __name__ == "__main__":
    main() 